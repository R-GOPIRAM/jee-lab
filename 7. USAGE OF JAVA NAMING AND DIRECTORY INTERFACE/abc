Your detailed implementation of the Java Naming and Directory Interface (JNDI) using EJB looks comprehensive. Here’s a clearer structure and organized outline of your steps:

### Project Directory Structure
```
ejb-jndi-example/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── tutorialspoint/
│   │   │           ├── entity/
│   │   │           │   ├── Author.java
│   │   │           │   └── Book.java
│   │   │           ├── stateless/
│   │   │           │   ├── LibraryPersistentBean.java
│   │   │           │   ├── LibraryPersistentBeanRemote.java
│   │   │           │   ├── LibrarySessionBean.java
│   │   │           │   └── LibrarySessionBeanLocal.java
│   └── resources/
│       └── hibernate.cfg.xml
├── jndi.properties
├── pom.xml
└── README.md
```

### Files and Their Content

#### 1. `pom.xml`
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>ejb-jndi-example</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>6.0.0.Alpha8</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.0.8</version>
        </dependency>
        <dependency>
            <groupId>javax.ejb</groupId>
            <artifactId>javax.ejb-api</artifactId>
            <version>3.2</version>
        </dependency>
    </dependencies>
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>
</project>
```

#### 2. `Author.java`
```java
package com.tutorialspoint.entity;

import java.io.Serializable;
import javax.persistence.*;

@Entity
@Table(name = "author")
public class Author implements Serializable {
    private int id;
    private String name;

    public Author() {}

    public Author(int id, String name) {
        this.id = id;
        this.name = name;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "author_id")
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Column(name = "name")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return id + "," + name;
    }
}
```

#### 3. `Book.java`
```java
package com.tutorialspoint.entity;

import java.io.Serializable;
import java.util.Set;
import javax.persistence.*;

@Entity
@Table(name = "book")
public class Book implements Serializable {
    private int id;
    private String name;
    private Set<Author> authors;

    public Book() {}

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "book_id")
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Column(name = "name")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAuthors(Set<Author> authors) {
        this.authors = authors;
    }

    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.EAGER)
    @JoinTable(name = "book_author",
               joinColumns = @JoinColumn(name = "book_id"),
               inverseJoinColumns = @JoinColumn(name = "author_id"))
    public Set<Author> getAuthors() {
        return authors;
    }
}
```

#### 4. `hibernate.cfg.xml`
```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/hibernate_demo</property>
        <property name="hibernate.connection.username">your_mysql_username</property>
        <property name="hibernate.connection.password">your_mysql_password</property>
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <mapping class="com.tutorialspoint.entity.Author"/>
        <mapping class="com.tutorialspoint.entity.Book"/>
    </session-factory>
</hibernate-configuration>
```

#### 5. `LibrarySessionBean.java`
```java
package com.tutorialspoint.stateless;

import java.util.ArrayList;
import java.util.List;
import javax.ejb.Stateless;
import javax.ejb.LocalBean;

@Stateless
@LocalBean
public class LibrarySessionBean implements LibrarySessionBeanLocal {
    private List<String> bookShelf;

    public LibrarySessionBean() {
        bookShelf = new ArrayList<>();
    }

    public void addBook(String bookName) {
        bookShelf.add(bookName);
    }

    public List<String> getBooks() {
        return bookShelf;
    }
}
```

#### 6. `LibrarySessionBeanLocal.java`
```java
package com.tutorialspoint.stateless;

import java.util.List;
import javax.ejb.Local;

@Local
public interface LibrarySessionBeanLocal {
    void addBook(String bookName);
    List<String> getBooks();
}
```

#### 7. `LibraryPersistentBeanRemote.java`
```java
package com.tutorialspoint.stateless;

import com.tutorialspoint.entity.Book;
import java.util.List;
import javax.ejb.Remote;

@Remote
public interface LibraryPersistentBeanRemote {
    void addBook(Book bookName);
    List<Book> getBooks();
}
```

#### 8. `LibraryPersistentBean.java`
```java
package com.tutorialspoint.stateless;

import com.tutorialspoint.entity.Book;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;

@Stateless
public class LibraryPersistentBean implements LibraryPersistentBeanRemote {

    @PersistenceContext(unitName = "EjbComponentPU")
    private EntityManager entityManager;

    public void addBook(Book book) {
        entityManager.persist(book);
    }

    public List<Book> getBooks() {
        return entityManager.createQuery("From Book").getResultList();
    }
}
```

#### 9. `EJBTester.java`
```java
package com.tutorialspoint.test;

import com.tutorialspoint.stateless.LibraryPersistentBeanRemote;
import com.tutorialspoint.entity.Book;
import com.tutorialspoint.entity.Author;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class EJBTester {

    BufferedReader brConsoleReader = null;
    Properties props;
    InitialContext ctx;

    {
        props = new Properties();
        try {
            props.load(new FileInputStream("jndi.properties"));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        try {
            ctx = new InitialContext(props);
        } catch (NamingException ex) {
            ex.printStackTrace();
        }
        brConsoleReader = new BufferedReader(new InputStreamReader(System.in));
    }

    public static void main(String[] args) {
        EJBTester ejbTester = new EJBTester();
        ejbTester.testEmbeddedObjects();
    }

    private void showGUI() {
        System.out.println("**********************");
        System.out.println("Welcome to Book Store");
        System.out.println("**********************");
        System.out.print("Options \n1. Add Book\n2. Exit \nEnter Choice: ");
    }

    private void testEmbeddedObjects() {
        try {
            int choice = 1;

            LibraryPersistentBeanRemote libraryBean = 
                (LibraryPersistentBeanRemote) ctx.lookup("LibraryPersistentBean/remote");

            while (choice != 2) {
                String bookName;
                String authorName;
                showGUI();
                String strChoice = brConsoleReader.readLine();
                choice = Integer.parseInt(strChoice);
                if (choice == 1) {
                    System.out.print("Enter book name

Certainly, let's continue from where we left off.

#### 9. `EJBTester.java` (continued)
```java
package com.tutorialspoint.test;

import com.tutorialspoint.stateless.LibraryPersistentBeanRemote;
import com.tutorialspoint.entity.Book;
import com.tutorialspoint.entity.Author;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class EJBTester {

    BufferedReader brConsoleReader = null;
    Properties props;
    InitialContext ctx;

    {
        props = new Properties();
        try {
            props.load(new FileInputStream("jndi.properties"));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        try {
            ctx = new InitialContext(props);
        } catch (NamingException ex) {
            ex.printStackTrace();
        }
        brConsoleReader = new BufferedReader(new InputStreamReader(System.in));
    }

    public static void main(String[] args) {
        EJBTester ejbTester = new EJBTester();
        ejbTester.testEmbeddedObjects();
    }

    private void showGUI() {
        System.out.println("**********************");
        System.out.println("Welcome to Book Store");
        System.out.println("**********************");
        System.out.print("Options \n1. Add Book\n2. Exit \nEnter Choice: ");
    }

    private void testEmbeddedObjects() {
        try {
            int choice = 1;

            LibraryPersistentBeanRemote libraryBean = 
                (LibraryPersistentBeanRemote) ctx.lookup("LibraryPersistentBean/remote");

            while (choice != 2) {
                String bookName;
                String authorName;
                showGUI();
                String strChoice = brConsoleReader.readLine();
                choice = Integer.parseInt(strChoice);
                if (choice == 1) {
                    System.out.print("Enter book name: ");
                    bookName = brConsoleReader.readLine();
                    System.out.print("Enter author name: ");
                    authorName = brConsoleReader.readLine();
                    Book book = new Book();
                    book.setName(bookName);
                    Author author = new Author();
                    author.setName(authorName);
                    Set<Author> authors = new HashSet<Author>();
                    authors.add(author);
                    book.setAuthors(authors);

                    libraryBean.addBook(book);
                } else if (choice == 2) {
                    break;
                }
            }

            List<Book> booksList = libraryBean.getBooks();
            System.out.println("Book(s) entered so far: " + booksList.size());
            int i = 0;
            for (Book book : booksList) {
                System.out.println((i + 1) + ". " + book.getName());
                System.out.print("Author: ");
                Author[] authors = book.getAuthors().toArray(new Author[0]);
                for (int j = 0; j < authors.length; j++) {
                    System.out.println(authors[j]);
                }
                i++;
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (brConsoleReader != null) {
                    brConsoleReader.close();
                }
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }
}
```

#### 10. `jndi.properties`
```properties
java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory
java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces
java.naming.provider.url=localhost
```

### SQL Scripts to Create the Tables
Here are the SQL scripts to create the tables `book`, `author`, and `book_author` in your PostgreSQL database:
```sql
CREATE TABLE book (
    book_id INTEGER PRIMARY KEY,
    name VARCHAR(50)
);

CREATE TABLE author (
    author_id INTEGER PRIMARY KEY,
    name VARCHAR(50)
);

CREATE TABLE book_author (
    book_id INTEGER,
    author_id INTEGER,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id),
    FOREIGN KEY (author_id) REFERENCES author(author_id)
);
```

### Steps to Deploy and Run the Application
1. **Create the Database**: Create a database named `hibernate_demo` in your PostgreSQL database and execute the above SQL scripts to create the necessary tables.

2. **Build the Project**: Use Maven to clean and build the project to ensure all dependencies are resolved and the project is compiled.
   ```sh
   mvn clean install
   ```

3. **Deploy the JAR/WAR File**: Deploy the generated JAR/WAR file to JBoss Application Server. Make sure the server is properly configured and started.

4. **Run the EJB Client**: Execute the `EJBTester` class to interact with the EJB components. This will prompt you to enter book and author details and store them in the database.

### Output
When you run the EJB Client, you should see an output similar to:
```
**********************
Welcome to Book Store
**********************
Options 
1. Add Book
2. Exit 
Enter Choice: 1
Enter book name: Learn Testing
Enter author name: John Doe
**********************
Welcome to Book Store
**********************
Options 
1. Add Book
2. Exit 
Enter Choice: 2
Book(s) entered so far: 1
1. Learn Testing
Author: John Doe
```

### Result
Thus, the usage of Java Naming and Directory Interface (JNDI) is successfully executed and verified.

Feel free to ask if you have any questions or need further assistance!
