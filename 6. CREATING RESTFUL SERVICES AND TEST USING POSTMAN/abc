Project Directory Structure
spring-rest-api-example/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           ├── controller/
│   │   │           │   └── UserController.java
│   │   │           ├── model/
│   │   │           │   └── User.java
│   │   │           ├── service/
│   │   │           │   ├── UserService.java
│   │   │           │   └── UserServiceImpl.java
│   │   └── resources/
│   │       └── application.properties
│   └── test/
│       ├── java/
│       │   └── com/
│       │       └── example/
│       │           └── UserTests.java
├── pom.xml
└── README.md
Files and Their Content
1. pom.xml
This is the Maven configuration file where you add the Spring Boot dependencies:

xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>spring-rest-api-example</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>spring-rest-api-example</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>11</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
2. User.java
This Java class represents the User entity:

java
package com.example.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long id;
    private String username;

    public User() {}

    public User(String username) {
        this.username = username;
    }

    public long getId() {
        return id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }
}
3. UserRepository.java
This interface extends JpaRepository to provide CRUD operations:

java
package com.example.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.example.model.User;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {}
4. UserService.java
This interface defines the service methods:

java
package com.example.service;

import java.util.List;
import com.example.model.User;

public interface UserService {
    List<User> getAllUsers();
    User getUser(long id);
    User addUser(User user);
}
5. UserServiceImpl.java
This class implements the service methods:

java
package com.example.service;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.example.model.User;
import com.example.repository.UserRepository;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Override
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @Override
    public User getUser(long id) {
        return userRepository.findById(id).orElse(null);
    }

    @Override
    public User addUser(User user) {
        return userRepository.save(user);
    }
}
6. UserController.java
This class defines REST endpoints for the User entity:

java
package com.example.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.example.model.User;
import com.example.service.UserServiceImpl;

@RestController
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserServiceImpl userServiceImpl;

    @GetMapping
    public List<User> getAllUsers() {
        return userServiceImpl.getAllUsers();
    }

    @GetMapping("/{id}")
    public User getUserById(@PathVariable long id) {
        return userServiceImpl.getUser(id);
    }

    @PostMapping
    public User addUser(@RequestBody User user) {
        return userServiceImpl.addUser(user);
    }
}
7. application.properties
This file configures the database connection:

properties
spring.datasource.url=jdbc:mysql://localhost:3306/your_database_name
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
8. UserTests.java
This class contains JUnit tests for the User service:

java
package com.example;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import com.example.service.UserService;
import java.util.List;
import com.example.model.User;

@SpringBootTest
public class UserTests {

    @Autowired
    private UserService userService;

    @Test
    public void testAllUsers() {
        List<User> users = userService.getAllUsers();
        assertEquals(3, users.size());
    }

    @Test
    public void testSingleUser() {
        User user = userService.getUser(100);
        assertTrue(user.getUsername().contains("David"));
    }
}
Running the Project
Create the Maven project structure as outlined above.

Add the dependencies to your pom.xml file.

Create the Java classes (User.java, UserRepository.java, UserService.java, UserServiceImpl.java, UserController.java) in the appropriate packages.

Create the application.properties file in the resources directory and configure the database connection.

Create the JUnit test class UserTests.java in the test directory.

Build and run the project using Maven commands:

To compile the project: mvn compile

To run the project: mvn spring-boot:run

Testing with Postman
Start the Spring Boot application.

Open Postman and create a new request.

Test the GET method to retrieve all users:

URL: http://localhost:8080/user

Method: GET

Test the POST method to add a new user:

URL: http://localhost:8080/user

Method: POST

Body (raw JSON):

json
{
    "username": "John Doe"
}
This setup should allow you to successfully create and test RESTful services using Postman. Let me know if you need further assistance or have any questions
